C is a general-purpose programming language created by Dennis Ritchie at the Bell Laboratories in 1972.

It is a very popular language, despite being old. The main reason for its popularity is because it is a fundamental language in the field of computer science.

first :

the first code you may seen is "hello world"

#include <stdio.h>

int main() {
  printf("Hello World!");
  return 0;
}

in any language they start with this example ever wondered why ?

it is simple but teach you the basics of every programming language 

what we see here :

1.#include <stdio.h>  which is including header file for input/output functions ex: printf() function

2. int main() is the entry point of a program. It is a function where execution starts. 

3.printf is printing function to user on the consule  printf("Hello World!");
computer program is a list of "instructions" to be "executed" by a computer.
in a programming language, these programming instructions are called statements.

every statement  must end with semicolon(;) to be excuted

4.return 0 ends the main() function.

see simple code to print text to the user

------------------------------------------------------------------------------------------------

lets head to  :

    "VARIABLES"

it is like a box to stores specific type of data.
To create a variable, specify the type and assign it a value:  { type variableName = value; }
     called declearation and initialization  ex: int myNum = 15;
     you can also declare a variable without assigning the value, and assign the value later  ex: int myNum;


there are different types of variables (defined with different keywords) 
  -int - stores integers (whole numbers)
  -float - stores floating point numbers
  -char - stores single characters, such as 'a' or 'B'. Characters are surrounded by single quotes
  -double - stores floating point numbers too with more  accurracy.
  -bool - stores true / false value

  each type stores different space in memory 
   int stores in 4 bytes
   float stores in 4 bytes
   double stores in 8 bytes
   char stores in 1 byte 
   bool stores in 1 byte

 " Type modifiers "  in C are used to alter the size and/or behavior of data types.
   They help in optimizing memory usage and defining variable constraints.
   -short - Reduces the storage size of an integer.
   -long - Increases the storage size of an integer.
   -signed - Allows both positive and negative values (default for integers).
   -unsigned - Only allows non-negative values (0 and positive numbers).


" Format Specifiers "  are used together with the printf() function to tell the compiler 
 what type of data the variable is storing. It is basically a placeholder for the variable value.
 format specifier starts with a percentage sign %, followed by a character.

  use %d for int
   %c for char 
   %f for float
   %lf for double
   %s  for string 


   For example, to output the value of an int variable, 
   use the format specifier %d surrounded by double quotes (""), inside the printf() function:
           int myNum = 15;
           printf("%d", myNum);

   " Constants "
   If you don't want others (or yourself) to change existing variable values, you can use the const keyword.
   This will declare the variable as "constant", which means unchangeable and read-only.

 
------------------------------------------------------------------------------------------------

 after we have known variables and how to store data lets try doing something to them 
 by 

 " Operators "

   Operators are used to perform operations on variables and values.  
   C divides the operators into the following groups:

     Arithmetic operators
     Assignment operators
     Comparison operators
     Logical operators
     

" Arithmetic Operators " are used to perform common mathematical operations.
  +	 Addition Adds together two values	            x + y	
  -	 Subtraction Subtracts one value from another	x - y	
  *	 Multiplication	Multiplies two values	        x * y	
  /	 Division Divides one value by another	        x / y	
  %	 Modulus Returns the division remainder	        x % y	
  ++ Increment Increases the value of a variable by 1	++x	
  -- Decrement Decreases the value of a variable by 1	--x 


" Assignment Operators " are used to assign values to variables.

=	     x = 5	          x = 5	
+=	     x += 3	          x = x + 3	
-=	     x -= 3	          x = x - 3	
*=	     x *= 3	          x = x * 3	
/=	     x /= 3	          x = x / 3	
%=	     x %= 3	          x = x % 3

" Comparison operators " are used to compare two values (or variables).
 This is important in programming, because it helps us to find answers and make decisions.

==	Equal to	                 x == y		
!=	Not equal	                 x != y		
>	Greater than	             x > y		
<	Less than	                 x < y		
>=	Greater than or equal to     x >= y	
<=	Less than or equal to	     x <= y

" Logical operators " are used to determine the logic between variables or values, by combining multiple conditions:

&& 	AND	x < 5 &&  x < 10	Returns 1 if both statements are true	
|| 	OR	x < 5 || x < 4	    Returns 1 if one of the statements is true	
!	NOT	!(x < 5 && x < 10)	Reverse the result, returns 0 if the result is 1

------------------------------------------------------------------------------------------------

all programs could be written in terms of only three control structures,
- the sequence structure
- the selection structure 
- the iteration structure

" sequence structure " is simple unless directed otherwise, the computer executes C statements one after the other in the
order in which they're written.


" Conditions and If Statements "
   " selection structure "

C provides three types of selection structures in the form of statements.

Use if to specify a block of code to be executed, if a specified condition is true
Use else to specify a block of code to be executed, if the same condition is false
Use else if to specify a new condition to test, if the first condition is false
Use switch to specify many alternative blocks of code to be executed

syntax :


" if "
if (condition) {
  // block of code to be executed if the condition is true
}


"else"

if (condition) {
  // block of code to be executed if the condition is true
} esle {

    // block of code to be executed if the condition is false
}



" else if "

if (condition1) {
  // block of code to be executed if condition1 is true
} else if (condition2) {
  // block of code to be executed if the condition1 is false and condition2 is true
} else {
  // block of code to be executed if the condition1 is false and condition2 is false
}


There is also a short-hand if else, which is known as the " TERNARY OPERATOR " because it consists of three operands. 
It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements.

   variable = (condition) ? expressionTrue : expressionFalse;


   " Switch Statement "
 Instead of writing many if..else statements, you can use the switch statement.
 The switch statement selects one of many code blocks to be executed

 switch (expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}

The switch expression is evaluated once.
The value of the expression is compared with the values of each case.
If there is a match, the associated block of code is executed.
The break statement breaks out of the switch block and stops the execution.
The default statement is optional, and specifies some code to run if there is no case match.

"iteration structure"

There are two means of iteration:

* Counter-controlled iteration is sometimes called
definite iteration because we know in advance
exactly how many times the loop will be executed.

* Sentinel-controlled iteration is sometimes called
indefinite iteration because it's not known in
advance how many times the loop will be executed


" While Loop "  (Sentinel-controlled iteration)
The while loop loops through a block of code as long as a specified condition is true.

  while (condition) {
  // code block to be executed
}

 " do/while loop "
is a variant of the while loop. This loop will execute the code block once,
 before checking if the condition is true, then it will repeat the loop as long as the condition is true.

 do {
  // code block to be executed
}
while (condition);

 " For Loop "   (Counter-controlled iteration)
When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop

for (expression 1; expression 2; expression 3) {
  // code block to be executed
}

Expression 1 is executed (one time) before the execution of the code block.

Expression 2 defines the condition for executing the code block.

Expression 3 is executed (every time) after the code block has been executed.

------------------------------------------------------------------------------------------------


